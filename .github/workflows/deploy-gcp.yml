name: Deploy to Google Cloud Run

on:
  workflow_dispatch:
    inputs:
      environment:
        description: '部署環境'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/**'

env:
  PROJECT_ID: gcp1-462701
  SERVICE_NAME: linebot0713
  REPOSITORY_NAME: pill-test
  IMAGE_NAME: "0713"
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    permissions:
      contents: read
      id-token: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        # 使用服務帳戶金鑰 JSON 方式
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker $REGION-docker.pkg.dev
      
    - name: Setup Artifact Registry repository
      run: |
        echo "Checking if repository $REPOSITORY_NAME exists..."
        
        # 嘗試描述倉庫
        if gcloud artifacts repositories describe $REPOSITORY_NAME --location=$REGION >/dev/null 2>&1; then
          echo "✅ Repository $REPOSITORY_NAME exists and is accessible"
        else
          echo "Repository $REPOSITORY_NAME does not exist. Attempting to create..."
          
          # 嘗試創建倉庫
          if gcloud artifacts repositories create $REPOSITORY_NAME \
            --repository-format=docker \
            --location=$REGION \
            --description="Docker repository for $REPOSITORY_NAME" 2>/dev/null; then
            echo "✅ Repository $REPOSITORY_NAME created successfully"
          else
            echo "❌ Failed to create repository. This might be due to:"
            echo "1. Repository already exists but service account lacks 'artifactregistry.repositories.get' permission"
            echo "2. Service account lacks 'artifactregistry.repositories.create' permission"
            echo ""
            echo "🔧 Quick fix - Run this command in Cloud Shell:"
            echo "gcloud artifacts repositories create $REPOSITORY_NAME --repository-format=docker --location=$REGION"
            echo ""
            echo "📋 Or add these permissions to service account:"
            echo "- roles/artifactregistry.admin"
            echo "- roles/artifactregistry.reader (minimum)"
            
            # 繼續嘗試，也許倉庫存在但權限不足以描述
            echo ""
            echo "⚠️  Continuing deployment assuming repository exists..."
          fi
        fi
        
        echo "Repository setup completed."
      
    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        echo "Image name: $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME/$IMAGE_NAME:$GITHUB_SHA"
        docker build -t $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME/$IMAGE_NAME:$GITHUB_SHA .
        docker tag $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME/$IMAGE_NAME:$GITHUB_SHA $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME/$IMAGE_NAME:latest
        echo "Docker images built successfully"
        docker images | grep $IMAGE_NAME
        
    - name: Push to Artifact Registry
      run: |
        echo "Pushing images to Artifact Registry..."
        echo "Repository: $REPOSITORY_NAME"
        echo "Full image path: $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME/$IMAGE_NAME"
        
        # 驗證倉庫存在並可訪問
        echo "Verifying repository access..."
        echo "Available repositories in $REGION:"
        gcloud artifacts repositories list --location=$REGION --format="table(name,format,createTime)"
        
        echo "Describing target repository $REPOSITORY_NAME:"
        gcloud artifacts repositories describe $REPOSITORY_NAME --location=$REGION
        
        echo "Pushing SHA tagged image..."
        docker push $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME/$IMAGE_NAME:$GITHUB_SHA
        
        echo "Pushing latest tagged image..."
        docker push $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME/$IMAGE_NAME:latest
        
        echo "✅ Images pushed successfully"
        
    - name: Deploy to Cloud Run
      run: |
        echo "Deploying to Cloud Run..."
        echo "Service name: $SERVICE_NAME"
        echo "Image: $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME/$IMAGE_NAME:$GITHUB_SHA"
        
        # 檢查服務是否已存在
        if gcloud run services describe $SERVICE_NAME --region=$REGION >/dev/null 2>&1; then
          echo "✅ Service $SERVICE_NAME exists, updating..."
        else
          echo "🆕 Service $SERVICE_NAME does not exist, creating new service..."
        fi
        
        gcloud run deploy $SERVICE_NAME \
          --image $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME/$IMAGE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 1 \
          --timeout 900 \
          --concurrency 10 \
          --max-instances 5 \
          --min-instances 1 \
          --update-env-vars LINE_CHANNEL_ACCESS_TOKEN="${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}" \
          --update-env-vars LINE_CHANNEL_SECRET="${{ secrets.LINE_CHANNEL_SECRET }}" \
          --update-env-vars YOUR_BOT_ID="${{ secrets.YOUR_BOT_ID }}" \
          --update-env-vars LIFF_CHANNEL_ID="${{ secrets.LIFF_CHANNEL_ID }}" \
          --update-env-vars LIFF_ID_CAMERA="${{ secrets.LIFF_ID_CAMERA }}" \
          --update-env-vars LIFF_ID_EDIT="${{ secrets.LIFF_ID_EDIT }}" \
          --update-env-vars LIFF_ID_PRESCRIPTION_REMINDER="${{ secrets.LIFF_ID_PRESCRIPTION_REMINDER }}" \
          --update-env-vars LIFF_ID_MANUAL_REMINDER="${{ secrets.LIFF_ID_MANUAL_REMINDER }}" \
          --update-env-vars LIFF_ID_HEALTH_FORM="${{ secrets.LIFF_ID_HEALTH_FORM }}" \
          --update-env-vars LINE_LOGIN_CHANNEL_ID="${{ secrets.LINE_LOGIN_CHANNEL_ID }}" \
          --update-env-vars LINE_LOGIN_CHANNEL_SECRET="${{ secrets.LINE_LOGIN_CHANNEL_SECRET }}" \
          --update-env-vars GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
          --update-env-vars GCS_BUCKET_NAME="${{ secrets.GCS_BUCKET_NAME }}" \
          --update-env-vars GOOGLE_APPLICATION_CREDENTIALS="${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" \
          --update-env-vars DB_HOST="${{ secrets.DB_HOST }}" \
          --update-env-vars DB_USER="${{ secrets.DB_USER }}" \
          --update-env-vars DB_PASS="${{ secrets.DB_PASS }}" \
          --update-env-vars DB_NAME="${{ secrets.DB_NAME }}" \
          --update-env-vars DB_PORT="${{ secrets.DB_PORT }}" \
          --update-env-vars SECRET_KEY="${{ secrets.SECRET_KEY }}" \
          --update-env-vars REMINDER_SECRET_TOKEN="${{ secrets.REMINDER_SECRET_TOKEN }}"
        
    - name: Get service URL
      id: url
      run: |
        URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
        echo "service_url=$URL" >> $GITHUB_OUTPUT
        echo "🚀 部署完成！服務 URL: $URL"
        
    - name: Run health check
      run: |
        sleep 30
        curl -f ${{ steps.url.outputs.service_url }}/health || exit 1
        echo "✅ 健康檢查通過"